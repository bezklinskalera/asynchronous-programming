//Безклинська Валерія. Варіант 2.

//ЗАВДАННЯ - Пошта
//Симулювати роботу пошти. Відправники приходять на пошту, щоб
//відправити лист/посилку, працівник пошти приймає лист/замовлення,відправляє отримувачам.
// Відправників і отримувачів може бути декілька (наприклад, по 3), а працівник пошти лише один.
//Враховуйте робочі години, тобто після закриття пошти лист/посилка може дійти, але вже не приймаються.

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Semaphore;

public class Main {

    // Кількість відправників в черзі (обмежена до 3)
    static final Semaphore tables = new Semaphore(3);

    // Кількість працівників пошти
    static final Semaphore postalWorker = new Semaphore(1);

    // Список для збереження потоків відправників

    //Collections.synchronizedList(...): - функція обертає список (ArrayList) у синхронізовану версію, що означає,
    // що всі операції над списком будуть безпечні для роботи з потоками (thread-safe).
    // Це важливо, оскільки у програмі кілька потоків можуть одночасно намагатися отримати доступ до списку,
    // додати нові елементи або читати з нього.

    // Список використовується для зберігання посилань на всі потоки (відправників).
    // Це дає можливість пізніше чекати на завершення кожного потоку, що дозволяє коректно завершити програму.

    //Використання synchronizedList гарантує, що доступ до списку з боку кількох потоків не призведе до некоректних станів
    // (наприклад, коли один потік намагається прочитати список, поки інший його модифікує).
    // Це запобігає виникненню помилок, пов'язаних з одночасним доступом до загального ресурсу.
    static List<Thread> list = Collections.synchronizedList(new ArrayList<Thread>());

    // Графік поштового відділення (зміннв для перевірки чи відділення відкрите)
    private static boolean isAvailableHours = true;

    // Перевірка чи відкрите ще дане відділення пошти
    public static synchronized boolean isOpen () {
        return isAvailableHours;
    }

    // Закриття пошти
    public static synchronized void closePostOffice () {
        isAvailableHours = false;
        System.err.println("================Пошту закрили===================");
    }

    public static void main(String[] args) throws InterruptedException {

        System.err.println("=============Відкриття Нової Пошти================");

        //Створення об’єкту runnable на основі лямбда виразу
        Runnable postOffice = () -> {

            // Лічильник для відправників
            int i = 0;

            //Кожен відправник представляється окремим потоком.
            // Потоки створюються в циклі, і новий потік запускається кожну секунду (Thread.sleep(1000)).

            while (true) {

                //потрібно перевірити, чи відкрита пошта, перед тим як нові відправники можуть зайти,
                // щоб уникнути ситуацій, коли хтось намагається зайти в закриту пошту.

                //використання Main.class як об'єкта для синхронізації означає, що всі потоки,
                // які намагаються отримати доступ до цього блоку, блокуватимуться, поки один із потоків виконує цей код.

                synchronized (Main.class) {
                    // Якщо пошта вже закрита, виходимо з циклу
                    if (!isOpen()) break;
                }

                // Створення нового потоку для відправника
                Thread thr = new Thread(new Senders(), String.valueOf(i));
                // Запуск потоку
                thr.start();
                // Додаємо потік до списку
                list.add(thr);
                i++;

                try {
                    // Новий відправник приходить щосекунди
                    Thread.sleep(1000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.err.println("=============Працівник обслуговує решту клієнтів================");

            for (Thread thr : list) {
                try {
                    thr.join(); // Чекаємо, поки потік завершиться
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            System.err.println("=============Працівник завершив обслуговування решти клієнтів================");
        };

        // Початок роботи пошти,  потік, який виконує основну логіку поштового відділення в програмі
        Thread postOfficeThread = new Thread(postOffice, "НоваПошта");
        postOfficeThread.start();

        // Час роботи пошти (6с)
        Thread.sleep(6000);
        closePostOffice();

        // Очікування завершення роботи пошти
        postOfficeThread.join();

        // Очікування завершення всіх відправників
        for (Thread thr : list) {
            // Чекаємо на завершення кожного потоку
            thr.join();
        }

        System.err.println("=============Працівник пішов додому================");
    }
}
